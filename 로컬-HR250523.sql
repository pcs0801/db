-- 사번 기준 내림차순 정렬, 연봉 기준 오름차순 정렬/
SELECT JOB_ID, SALARY FROM EMPLOYEES ORDER BY JOB_ID DESC, SALARY ASC;
-- 가상테이블 -> 진짜테이블(테이블 구성 ; 인스턴스 1개, 컬럼명 2개)
SELECT 24+34 AS RESLUT FROM DUAL;
-- 부서별 총 급여 출력
SELECT DEPARTMENT_ID, ROUND(AVG(SALARY),-2) FROM EMPLOYEES GROUP BY DEPARTMENT_ID HAVING SUM(SALARY) >= 50000 AND DEPARTMENT_ID = 100;

GROUP BY DEPARTMENT_ID HAVING SUM(SALARY) >= 50000 AND DEPARTMENT_ID = 100;

-- JOB_ID : IT_PROG 문자열을 비교할 때에는 UPPER(), LOWER()
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID FROM EMPLOYEES
WHERE LOWER(JOB_ID) = LOWER('IT_PROg');

-- CONCAT
SELECT CONCAT(FIRST_NAME, '($' || SALARY || ')') AS "사원 정보" FROM EMPLOYEES WHERE DEPARTMENT_ID = 30;

--/// Q. 'jking'이란 이메일을 갖는 직원의 이름, 급여, 커미션 정보를 출력
SELECT FIRST_NAME, LAST_NAME, SALARY, COMMISSION_PCT FROM EMPLOYEES WHERE UPPER(EMAIL) = 'JKING';

--/// Q. 이름이 6글자 이상인 직원의 직원번호, 이름, 급여 정보를 출력
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES WHERE LENGTH(FIRST_NAME) >= 6;

-- Q. 부서가 20인 사원들의 입사년도 월만 출력
SELECT FIRST_NAME, LAST_NAME, SUBSTR(HIRE_DATE, 4, 2) FROM EMPLOYEES WHERE DEPARTMENT_ID = 20;

--/// Q. 03년도에 입사한 사원 정보 출력
SELECT * FROM EMPLOYEES WHERE SUBSTR(HIRE_DATE, 4, 2) = 03;

--/// Q. 이름이 K로 끝나는 사원 정보 출력
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE '%k';

--/// Q. 직원 번호가 짝수인 직원의 직원번호, 이름, 직급 정보를 출력
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID FROM EMPLOYEES WHERE MOD(EMPLOYEE_ID, 2) = 0;

-- 근무 개월수 구하기
SELECT FIRST_NAME 이름, SYSDATE 오늘, TO_CHAR(HIRE_DATE, 'YYYY/MM/DD') 입사일,
TRUNC(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) 근무달수 FROM EMPLOYEES WHERE DEPARTMENT_ID = 30;

-- EMPLOYEES에서 직급별 정렬(오름차순) 이름, 봉금, 인상률, 보너스금액, 월급 + 보너스금액
SELECT FIRST_NAME, SALARY, COMMISSION_PCT, SALARYNVL(COMMISSION_PCT,0) AS COMMISSION,
SALARY+(SALARYNVL(COMMISSION_PCT,0)) AS TOTAL, JOB_ID
FROM EMPLOYEES ORDER BY JOB_ID;

--/// Q. 상관이 없는 직원의 MANAGER_ID 값을 CEO로 출력
SELECT FIRST_NAME 이름, LAST_NAME 성, NVL(TO_CHAR(MANAGER_ID), 'CEO') 상사 FROM EMPLOYEES;

--NVL2(컬럼, NULL 아니면, NULL)
SELECT FIRST_NAME, SALARY, COMMISSION_PCT,
NVL2(COMMISSION_PCT, SALARY+(SALARY*COMMISSION_PCT), SALARY) TOTAL_SAL
FROM EMPLOYEES;
SELECT DEPARTMENT_ID, DECODE(DEPARTMENT_ID, 10, 'Administration', 20, 'Marketing',
30, 'Purchasing', 40, 'Human Resources', 50, 'Shipping', 60, 'IT' ) AS DEPARTMENTS
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID;

-- GROUP BY SUM, AVG, MAX, MIN, COUNT
-- COUNT(*) NULL 값 인정하지 않음
SELECT COUNT(*) AS TOTAL FROM EMPLOYEES;
SELECT COUNT(COMMISSION_PCT) AS TOTAL FROM EMPLOYEES;   

-- 부서별 평균 월급 구하기
SELECT DEPARTMENT_ID, ROUND(AVG(SALARY),2), MAX(SALARY), MIN(SALARY), COUNT(*) FROM EMPLOYEES GROUP BY DEPARTMENT_ID;

--/// Q. JOB의 종류가 몇 개 인지, 즉, 증복되지 않은 직업 개수 구하기
SELECT COUNT(DISTINCT JOB_ID) FROM EMPLOYEES;

-- EMPLOYEES 테이블에서 부서명, 최대 급여, 최소 급여를 부서명을 기준으로 오름차순 정렬
SELECT DEPARTMENT_ID, MAX(SALARY), MIN(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID ASC;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IS NULL;

--/// Q. 부서별 직원 수, 커미션을 받는 직원 수를 출력
SELECT DEPARTMENT_ID, COUNT(DEPARTMENT_ID) FROM EMPLOYEES GROUP BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID;

-- Q. 부서별 급여 인상률 차등 적용 (직원번호, 직원명, 직급, 급여 출력) Marketing = 5%, Purchasing = 10%, Human Resources = 15%, IT = 20%
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, 
CASE WHEN DEPARTMENT_ID = 20 THEN TRUNC(SALARY * 1.05)
    WHEN DEPARTMENT_ID = 30 THEN TRUNC(SALARY * 1.10)
    WHEN DEPARTMENT_ID = 40 THEN TRUNC(SALARY * 1.15)
    WHEN DEPARTMENT_ID = 60 THEN TRUNC(SALARY * 1.20)
END SALARY_RESULT FROM EMPLOYEES WHERE DEPARTMENT_ID IN (20,30,40,60);

-- ROLLUP GROUP BY 부분 항목별로 통계 출력
SELECT DEPARTMENT_ID, JOB_ID, MAX(SALARY), MIN(SALARY), COUNT(*), TRUNC(AVG(SALARY)), SUM(SALARY) FROM EMPLOYEES GROUP BY ROLLUP(DEPARTMENT_ID, JOB_ID)
ORDER BY DEPARTMENT_ID, JOB_ID;

-- CUBE ROLLUP 합계
SELECT DEPARTMENT_ID, JOB_ID, MAX(SALARY), MIN(SALARY), COUNT(*), TRUNC(AVG(SALARY)), SUM(SALARY) FROM EMPLOYEES GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)
ORDER BY DEPARTMENT_ID, JOB_ID;

-- 새로운 테이블 만들기 DEPT 속성(DEPTNO, DNAME, LOC) NOT NULL, PK(DEPTNO)
CREATE TABLE DEPT(
    DEPTNO NUMBER(4),
    DNAME VARCHAR2(20) NOT NULL,
    LOC VARCHAR2(20) NOT NULL
);
ALTER TABLE DEPT ADD CONSTRAINT DEPT_PK PRIMARY KEY(DEPTNO);
ALTER TABLE DEPT DROP CONSTRAINT DEPT_PK;
ALTER TABLE DEPT MODIFY DNAME VARCHAR2(20);
ALTER TABLE DEPT ADD DPHONE VARCHAR2(12);
ALTER TABLE DEPT DROP COLUMN DPHONE;
ALTER TABLE DEPT MODIFY LOC VARCHAR2(20) NULL;
-- INSERT
INSERT INTO DEPT(DEPTNO, DNAME, LOC) VALUES(1,'컴퓨터학과','본관');
INSERT INTO DEPT(DEPTNO, DNAME, LOC) VALUES(2,'시스템학과','공학관');
INSERT INTO DEPT VALUES(3,'컴공','공학관2');
INSERT INTO DEPT(DEPTNO, DNAME) VALUES(4,'디자인');
INSERT INTO DEPT VALUES(5,'컴디',NULL);

INSERT INTO DEPT SELECT DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID FROM DEPARTMENTS;

CREATE TABLE EMP AS SELECT * FROM EMPLOYEES;

ALTER TABLE EMP ADD CONSTRAINT EMP_PK PRIMARY KEY(EMPLOYEE_ID);

UPDATE EMP SET DEPARTMENT_ID = 91 WHERE DEPARTMENT_ID = 90;
COMMIT;
ROLLBACK;

UPDATE EMP SET SALARY = ROUND(SALARY * 1.1) WHERE DEPARTMENT_ID = 91;

UPDATE EMP SET DEPARTMENT_ID = 20, JOB_ID = 'FI_MGR' WHERE UPPER(FIRST_NAME) = 'SUSAN';

DELETE FROM EMP WHERE DEPARTMENT_ID = 20;

--/// Q. EMP01 테이블 생성 및 작성
DROP TABLE EMP01;
CREATE TABLE EMP01(EMPNO NUMBER(4) NOT NULL, 
ENAME VARCHAR2(10) NOT NULL,
JOB VARCHAR2(9),
MGR NUMBER(4),
HIREDATE DATE NOT NULL,
SAL NUMBER(7,2) NOT NULL,
COMM NUMBER(7,2),
DEPTNO NUMBER(2) NOT NULL); 

ALTER TABLE EMP01 ADD CONSTRAINT EMP01_PK PRIMARY KEY(EMPNO);
ALTER TABLE EMP01 ADD CONSTRAINT EMP01_UK UNIQUE(ENAME);
ALTER TABLE EMP01 ADD CONSTRAINT EMP01_CK CHECK(SAL BETWEEN 1000 AND 200000);
ALTER TABLE EMP01 RENAME COLUMN COMM TO COMMISSION;
ALTER TABLE EMP01 ADD CONSTRAINT EMP01_DEPTNO_FK FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO);
ALTER TABLE EMP01 DROP CONSTRAINT EMP01_UK;

INSERT INTO EMP01(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES(7369, 'SMITH', 'CLEAK', 7836, '19801217',800, NULL, 20);
INSERT INTO EMP01(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES(7499, 'ALLEN', 'SALESMAN', 7369, '19871220',1600, 300, 30);
INSERT INTO EMP01(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES(7839, 'KING', 'PRESIDENT', NULL, '19810208',5000, NULL, 10);

SELECT * FROM EMP01;

--/// Q. MEMBERS 테이블 생성 및 작성
CREATE TABLE MEMBERS (ID VARCHAR2(20) NOT NULL,
NAME VARCHAR2(20) NOT NULL,
REGNO VARCHAR2(13) NOT NULL,
HP VARCHAR2(13) NOT NULL,
ADDRESS VARCHAR2(100) NOT NULL);

ALTER TABLE MEMBERS ADD CONSTRAINT MEMBERS_PK PRIMARY KEY(ID);

INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user01', 'John Smith', '9001011234567', '202-555-0101', '123 Main St, Springfield, IL');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user02', 'Emily Johnson','8802022345678', '303-555-0123', '456 Oak Ave, Denver, CO');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user03', 'Michael Brown','8503153456789', '213-555-0199', '789 Pine Rd, Los Angeles, CA');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user04', 'Sarah Davis','9204074567890', '646-555-0172', '101 Maple St, New York, NY');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user05', 'David Wilson','9305095678901', '617-555-0133', '202 Elm St, Boston, MA');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user06', 'Ashley Moore', '9506106789012', '415-555-0166', '303 Birch Ln, San Francisco, CA');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user07', 'Daniel Taylor','8707117890123', '512-555-0111', '404 Cedar Blvd, Austin, TX');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user08', 'Olivia Anderson','8908128901234', '206-555-0188', '505 Walnut Dr, Seattle, WA');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user09', 'James Thomas','8609139012345', '312-555-0155', '606 Chestnut St, Chicago, IL');
INSERT INTO MEMBERS(ID, NAME, REGNO, HP, ADDRESS) VALUES('user10', 'Sophia Martinez','9401140123456', '407-555-0144', '707 Aspen Way, Orlando, FL');

SELECT * FROM MEMBERS ORDER BY ID ASC;

--/// Q. BOOKS 테이블 생성 및 작성
CREATE TABLE BOOKS(CODE NUMBER(4) NOT NULL,
TITLE VARCHAR2(50) NOT NULL,
COUNT NUMBER(6) NOT NULL,
PRICE NUMBER(10) NOT NULL,
PUBLISH VARCHAR2(50) NOT NULL);

ALTER TABLE BOOKS ADD CONSTRAINT BOOKS_PK PRIMARY KEY(CODE);

INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1001, 'The Great Gatsby', 12, 15000, 'Penguin Classics');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1002, 'To Kill a Mockingbird', 8, 18000, 'HarperCollins');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1003, '1984', 15, 16000, 'Signet Classics');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1004, 'Pride and Prejudice', 10, 14000, 'Oxford Press');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1005, 'The Catcher in the Rye', 7, 17000, 'Little, Brown');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1006, 'Moby Dick', 5, 20000, 'Harper and Brothers');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1007, 'Jane Eyre', 9, 16000, 'Vintage Books');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1008, 'The Hobbit', 20, 19000, 'Houghton Mifflin');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1009, 'War and Peace', 4, 25000, 'Penguin Classics');
INSERT INTO BOOKS(CODE, TITLE, COUNT, PRICE, PUBLISH) VALUES(1010, 'The Alchemist', 18, 13500, 'HarperOne');

SELECT * FROM BOOKS ORDER BY CODE ASC;
