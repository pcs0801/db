-- 실습1. 입고 트리거 작성
CREATE TABLE PRODUCT(
    PCODE CHAR(6),
    PNAME VARCHAR2(12) NOT NULL,
    PCOMPANY VARCHAR(12),
    PPRICE NUMBER(8),
    STOCK NUMBER DEFAULT 0,
    CONSTRAINT PRODUCT_PK PRIMARY KEY(PCODE)
);

CREATE TABLE RECEIVING(
    RNO NUMBER(6),
    PCODE CHAR(6),
    RDATE DATE DEFAULT SYSDATE,
    RQTY NUMBER(6),
    RPRICE NUMBER(8),
    RAMOUNT NUMBER(8),
    CONSTRAINT RECEIVING_PK PRIMARY KEY(RNO),
    CONSTRAINT RECEIVING_FK FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE)
);

INSERT INTO PRODUCT(PCODE, PNAME, PCOMPANY, PPRICE) VALUES('A00001','세탁기','LG',1500000);
INSERT INTO PRODUCT(PCODE, PNAME, PCOMPANY, PPRICE) VALUES('A00002','컴퓨터','LG',1000000);
INSERT INTO PRODUCT(PCODE, PNAME, PCOMPANY, PPRICE) VALUES('A00003','냉장고','삼성',4500000);

CREATE OR REPLACE TRIGGER TRG_IN
AFTER INSERT ON RECEIVING
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET STOCK = STOCK + :NEW.RQTY
    WHERE PCODE = :NEW.PCODE;
END;
/

INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) VALUES(1,'A00001',5,850000,950000);
INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) VALUES(2,'A00002',10,680000,780000);
INSERT INTO RECEIVING(RNO, PCODE, RQTY, RPRICE, RAMOUNT) VALUES(3,'A00003',10,250000,300000);
SELECT * FROM PRODUCT;

-- 실습2. 갱신 트리거 작성
CREATE OR REPLACE TRIGGER TRG_UP
AFTER UPDATE ON RECEIVING
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET STOCK = STOCK + (-:OLD.RQTY +:NEW.RQTY)
    WHERE PCODE = :NEW.PCODE;
END;
/

UPDATE RECEIVING SET RQTY = 8, RAMOUNT = 280000 WHERE RNO = 3;

SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

-- 실습3. 삭제 트리거 작성
CREATE OR REPLACE TRIGGER TRG_DEL
AFTER DELETE ON RECEIVING
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET STOCK = STOCK - :OLD.RQTY
    WHERE PCODE = :OLD.PCODE;
END;
/

DELETE RECEIVING WHERE RNO = 3;
SELECT * FROM RECEIVING;
SELECT * FROM PRODUCT;

-- 예제
-- 1. 성적처리 테이블 생성
CREATE TABLE SUNG(
    HAKBUN NUMBER(4),
    HAKNAME VARCHAR2(20) NOT NULL,
    KOR NUMBER(4) NOT NULL,
    ENG NUMBER(4) NOT NULL,
    MAT NUMBER(4) NOT NULL,
    TOT NUMBER(4),
    AVE NUMBER(5,1),
    RANK NUMBER(4),
    CONSTRAINT SUNG_PK PRIMARY KEY(HAKBUN)
);

SELECT * FROM SUNG;

-- 2. 프로시저(SUNG_INPUT) 작성 **학번, 이름, 국어, 영어, 수학 입력 시, 총점 및 평균 자동계산
CREATE OR REPLACE PROCEDURE SUNG_INPUT
IS
    INPUT_HAKBUN NUMBER(4);
BEGIN
END;
/

-- 3. 트리거(SUNGCAL_TRG) 작성 **학번, 이름, 국어, 영어, 수학 이력 시, 총점 및 평균 자동계산
CREATE OR REPLACE TRIGGER SUNGCAL_TRG
AFTER UPDATE ON 

DROP TABLE BOOKS;

CREATE TABLE BOOKS ( 
BOOK_ID NUMBER(4), 
TITLE VARCHAR2(50), 
PUBLISHER VARCHAR2(30), 
YEAR VARCHAR2(10), 
PRICE NUMBER(6), 
PRIMARY KEY(BOOK_ID) 
);

SELECT * FROM BOOKS;
 
CREATE SEQUENCE book_id_seq 
START WITH 1 
INCREMENT BY 1 ; 
 
INSERT INTO books (book_id, title, publisher, year, price) VALUES (book_id_seq.nextval, 'Operating 
System Concepts', 'Wiley', '2003',30700); 
INSERT INTO books (book_id, title, publisher, year, price) VALUES (book_id_seq.nextval, 'Head First PHP 
and MYSQL', 'OReilly', '2009', 58000); 
INSERT INTO books (book_id, title, publisher, year, price) VALUES (book_id_seq.nextval, 'C Programming 
Language', 'Prentice-Hall', '1989', 35000); 
INSERT INTO books (book_id, title, publisher, year, price) VALUES (book_id_seq.nextval, 'Head First SQL', 
'OReilly', '2007', 43000); 
commit;