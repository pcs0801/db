SELECT * FROM USER_VIEWS;

SELECT * FROM EMP_DETAILS_VIEW;

SELECT TEXT FROM USER_VIEWS WHERE VIEW_NAME = 'VIEW_EMP01';

INSERT INTO EMP01
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 100;
-- 가상 뷰 생성
CREATE OR REPLACE VIEW VIEW_EMP01
AS
SELECT * FROM EMP01;
SELECT * FROM VIEW_EMP01;
-- 가상 뷰에 데이터 입력
INSERT INTO VIEW_EMP01 VALUES (7499, 'KDJ', 'IT_DEV', 90);
-- 가상 뷰 생성(부서별 총 월급 합계, 전체 평균금액, 인원수)
CREATE OR REPLACE VIEW VIEW_SALARY
AS
SELECT DEPARTMENT_ID, SUM(SALARY) TOTAL_SALARY, ROUND(AVG(SALARY)) AVG_SALARY, COUNT(*) TOTAL_COUNT FROM EMPLOYEES 
GROUP BY DEPARTMENT_ID ORDER BY DEPARTMENT_ID ASC;

SELECT * FROM VIEW_SALARY ORDER BY TOTAL_COUNT;

-- EMPLOYEES, DEPARTMENTS 두 테이블을 INNER JOIN하여 아이디, 이름, 부서아이디, 부서명 출력(부서 아이디로 내림차순 정렬)
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.DEPARTMENT_ID FROM EMPLOYEES E, DEPARTMENTS D 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
ORDER BY E.DEPARTMENT_ID DESC;

-- CHECK OPTION
INSERT INTO EMP01 
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, DEPARTMENT_ID 
FROM EMPLOYEES 
WHERE EMPLOYEE_ID != 100 AND DEPARTMENT_ID IS NOT NULL;

DESC EMP01;
ALTER TABLE EMP01
MODIFY ENAME VARCHAR2(20);

ALTER TABLE EMP01
MODIFY JOB VARCHAR2(10);

-- VIEW WITH CHECK OPTION TEST
-- VIEW_CHK 생성(부서번호 20에 속한 사원번호, 이름, 직급, 부서아이디 출력. 단 부서아이디에 WITH CHECK OPTION 설정할 것)
CREATE OR REPLACE VIEW VIEW_CHK
AS
SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP01 WHERE DEPTNO = 20 WITH CHECK OPTION;

SELECT * FROM VIEW_CHK;
UPDATE VIEW_CHK SET DEPTNO = 30
WHERE EMPNO = 7499;

DELETE FROM VIEW_CHK WHERE DEPTNO = 20;

-- VIEW WITH READ ONLY : 기본 테이블의 어떤 컬럼에도 내용 수정이 불가능 하도록 설정
-- VIEW_READ를 생성하고 EMP01에서 부서 30번에 속하는 아이디, 이름, 직급, 부서아이디를 출력
CREATE OR REPLACE VIEW VIEW_READ
AS
SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP01 
WHERE DEPTNO = 30 WITH READ ONLY;

SELECT * FROM EMP01;

UPDATE VIEW_READ SET DEPTNO = 100 WHERE EMPNO = 115;
-- ROWNUM 확인
SELECT ROWID, ROWNUM, FIRST_NAME FROM EMPLOYEES WHERE ROWNUM <= 20;
-- ROWNUM HIRE_DATE 오래된 순으로 10명 출력
SELECT * FROM (SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE FROM EMPLOYEES ORDER BY HIRE_DATE) WHERE ROWNUM <= 10;
SELECT * FROM VIEW_HIREDATE_ASC WHERE ROWNUM <= 10;

CREATE OR REPLACE VIEW VIEW_HIREDATE_ASC AS SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE FROM EMPLOYEES ORDER BY HIRE_DATE;

SELECT * FROM VIEW_HIREDATE_ASC;

-- 시퀀스 EMP_SEQ 생성
CREATE SEQUENCE EMP_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 100000
NOCYCLE
CACHE 2;

-- EMP01 테이블 삭제 및 생성
DROP TABLE EMP01;
CREATE TABLE EMP01 AS SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, SALARY FROM EMPLOYEES WHERE 1 = 0;

-- SEQUENCE(AUTO INCREMENT)를 사용하여 데이터 입력
INSERT INTO EMP01 VALUES(EMP_SEQ.NEXTVAL,'가가가',SYSDATE,40000);
INSERT INTO EMP01 VALUES(EMP_SEQ.NEXTVAL,'나나나',SYSDATE,30000);

SELECT * FROM EMP01;
-- SEQUENCE가 몇 번까지 설정되어있는지 출력
SELECT EMP_SEQ.CURRVAL FROM DUAL;

-- DEP_SEQ SEQUENCE 생성(START WITH 10, INCREMENT BY 10, MINVALUE 10, MAXVALUE 20, NOCYCLE, CACHE 2)
CREATE SEQUENCE DEP_SEQ
START WITH 10
INCREMENT BY 10
MINVALUE 10
MAXVALUE 20
NOCYCLE
CACHE 2;

ALTER SEQUENCE DEP_SEQ MAXVALUE 30;

-- DEP01 TABLE 생성 및 데이터 입력
DROP TABLE DEP01;
CREATE TABLE DEP01 AS SELECT DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID FROM DEPARTMENTS WHERE 1 = 0;
-- DEP01 테이블에 DEP_SEQ 적용 후 오류 유도
INSERT INTO DEP01 VALUES(DEP_SEQ.NEXTVAL, '행정', 1);
INSERT INTO DEP01 VALUES(DEP_SEQ.NEXTVAL, '서무', 2);
INSERT INTO DEP01 VALUES(DEP_SEQ.NEXTVAL, '총무', 3);
INSERT INTO DEP01 VALUES(DEP_SEQ.NEXTVAL, '교육', 4);

ALTER SEQUENCE DEP_SEQ MAXVALUE 100;
SELECT * FROM DEP01;
-- DATA DICTIONARY 참조 (DEP_SEQ)
SELECT * FROM USER_SEQUENCES;

-- DATA DICTIONARY (오라클에서 DB 관련 정보를 관리하는 테이블)
SELECT * FROM USER_TABLES;
SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_CONS_COLUMNS;
SELECT * FROM USER_IND_COLUMNS WHERE TABLE_NAME = 'EMP01';
SELECT * FROM EMP01 WHERE EMPLOYEE_ID = 200;

-- EMP01 EMPLOYEE_ID 인덱스 설정
CREATE UNIQUE INDEX IDX_EMP01_EMPLOYEE_ID
ON EMP01(EMPLOYEE_ID);

-- PL/SQL
DECLARE
    EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE; -- 스칼라 변수 : EMP_ID NUMBER(6); // -- 레퍼런스 변수 : EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    EMP_NAME EMPLOYEES.FIRST_NAME%TYPE; -- 스칼라 변수 : EMP_NAME VARCHAR2(20) // -- 레퍼런스 변수 : EMP_NAME EMPLOYEES.FIRST_NAME%TYPE;
BEGIN
    SELECT EMPLOYEE_ID, FIRST_NAME INTO EMP_ID, EMP_NAME FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
    DBMS_OUTPUT.PUT_LINE('이름 : '|| EMP_NAME || CHR(10) || '번호 : ' || EMP_ID);
END;
/

-- 테이블 타입 정의
-- TYPE ABC TO INTEGER
DECLARE
    EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE; -- 스칼라 변수 : EMP_ID NUMBER(6); // -- 레퍼런스 변수 : EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    EMP_NAME EMPLOYEES.FIRST_NAME%TYPE; -- 스칼라 변수 : EMP_NAME VARCHAR2(20) // -- 레퍼런스 변수 : EMP_NAME EMPLOYEES.FIRST_NAME%TYPE;
BEGIN
    SELECT EMPLOYEE_ID, FIRST_NAME INTO EMP_ID, EMP_NAME FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
    DBMS_OUTPUT.PUT_LINE('이름 : '|| EMP_NAME || CHR(10) || '번호 : ' || EMP_ID);
END;
/

DESC EMPLOYEES;

------- TEST -------
-- TEST1 
-- 직원 테이블에서 사원명, 직급코드, 보너스를 받는 사원 수를 조회하여 직급코드 순으로 오름차순 정렬
SELECT * FROM EMP_TEST;

SELECT COUNT(*) AS 사원수 FROM (SELECT EMPNAME, JOBCODE FROM EMP_TEST WHERE BONUS IS NOT NULL) GROUP BY JOBCODE ORDER BY JOBCODE ;

SELECT EMPNAME, JOBCODE, BONUS FROM (SELECT EMPNAME, JOBCODE, BONUS FROM EMP_TEST WHERE BONUS IS NULL) ORDER BY JOBCODE ASC;

CREATE TABLE EMP_TEST(
    EMPNAME VARCHAR2(20),
    JOBCODE NUMBER,
    BONUS NUMBER
);
INSERT INTO EMP_TEST VALUES('가가가',01,10);
INSERT INTO EMP_TEST VALUES('나나나',02,NULL);
INSERT INTO EMP_TEST VALUES('다다다',03,NULL);
INSERT INTO EMP_TEST VALUES('라라라',01,NULL);
INSERT INTO EMP_TEST VALUES('마마마',02,5);
INSERT INTO EMP_TEST VALUES('바바바',03,5);
INSERT INTO EMP_TEST VALUES('사사사',01,NULL);
INSERT INTO EMP_TEST VALUES('자자자',02,20);
INSERT INTO EMP_TEST VALUES('카카카',03,15);



-- TEST2
CREATE TABLE EMP_TEST2(
    ENAME VARCHAR2(20),
    JOBNO VARCHAR2(20)
);

INSERT INTO EMP_TEST2 VALUES('JAMES', 'J02');
INSERT INTO EMP_TEST2 VALUES('WILLIAM', 'J03');
INSERT INTO EMP_TEST2 VALUES('RYAN', 'J01');

CREATE TABLE JOB_TEST2(
    JOBNO_1 VARCHAR2(20),
    JOB_NAME VARCHAR2(20)
);

INSERT INTO JOB_TEST2 VALUES('J01','사원');
INSERT INTO JOB_TEST2 VALUES('J02','주임');
INSERT INTO JOB_TEST2 VALUES('J03','대리');
INSERT INTO JOB_TEST2 VALUES('J04','과장');

SELECT * FROM EMP_TEST2;
SELECT * FROM JOB_TEST2;

SELECT E.ENAME, E.JOBNO, J.JOBNO_1, J.JOB_NAME FROM EMP_TEST2 E, JOB_TEST2 J WHERE UPPER(E.ENAME) = 'JAMES' AND E.JOBNO = J.JOBNO_1;
------- 250529 과제 -------
-- Q1. 사원 번호와 사원명과 부서명과 부서의 위치를 출력하는 뷰(VIEW_LOC)를 작성하라.
CREATE OR REPLACE VIEW VIEW_LOC
AS SELECT E.EMPLOYEE_ID, E.FIRST_NAME, D.DEPARTMENT_NAME, E.DEPARTMENT_ID FROM EMPLOYEES E, DEPARTMENTS D WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM VIEW_LOC;

-- Q2. 30번 부서 소속 사원의 이름과 입사일과 부서명을 출력하는 뷰(VIEW_DEPT30)를 작성하라.
CREATE OR REPLACE VIEW VIEW_DEPT30
AS SELECT E.FIRST_NAME, E.HIRE_DATE, D.DEPARTMENT_NAME FROM EMPLOYEES E, DEPARTMENTS D 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.DEPARTMENT_ID = 30;
SELECT * FROM VIEW_DEPT30;

-- Q3. 부서별 최대 급여 정보를 가지는 뷰(VIEW_DEPT_MAXSAL)를 생성하라.
CREATE OR REPLACE VIEW VIEW_DEPT_MAXSAL
AS SELECT D.DEPARTMENT_NAME, MAX(E.SALARY) AS MAX_SALARY FROM EMPLOYEES E, DEPARTMENTS D 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID GROUP BY D.DEPARTMENT_NAME;
SELECT * FROM VIEW_DEPT_MAXSAL;

-- Q4. 급여를 많이 받는 순서대로 3명만 출력하는 뷰(VIEW_SAL_TOP3)와 인라인 뷰로 작성하라.
CREATE OR REPLACE VIEW VIEW_SAL_TOP3
AS SELECT * FROM (SELECT FIRST_NAME, SALARY FROM EMPLOYEES ORDER BY SALARY DESC) WHERE ROWNUM <= 3;
SELECT * FROM VIEW_SAL_TOP3;