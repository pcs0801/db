-- 저장 프로시저 EMP_PROCEDURE
CREATE OR REPLACE PROCEDURE EMP_PROCEDURE
IS 
    -- 임의문자를 받는 변수 생성
    VWORD VARCHAR2(1);
    -- 모든 레코드 타입을 받는 변수 생성
    VEMP EMPLOYEES%ROWTYPE;
    -- CURSOR 생성(=ARRAYLIST)
    CURSOR C1 (VWORD VARCHAR2)
    IS
    SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, JOB_ID FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'||VWORD||'%';
BEGIN
    -- 임의문자 추출
    VWORD := DBMS_RANDOM.STRING('A',1);
    DBMS_OUTPUT.PUT_LINE('임의문자 : ' || VWORD); 
    OPEN C1(VWORD);
    LOOP 
        FETCH C1 INTO VEMP.EMPLOYEE_ID, VEMP.FIRST_NAME, VEMP.SALARY, VEMP.JOB_ID;
        -- C1 ROWCOUNT CHECK
        IF C1%ROWCOUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('해당되는 직원이 없습니다.');
        END IF;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID : ' || VEMP.EMPLOYEE_ID || ' 이름 : ' || VEMP.FIRST_NAME || ' 연봉 : ' || VEMP.SALARY);
    END LOOP;
END;
/

EXECUTE EMP_PROCEDURE;

-- 저장 프로시저
CREATE OR REPLACE PROCEDURE EMP_PROCEDURE
IS 
    -- 임의문자를 받는 변수 생성
    VWORD VARCHAR2(1);
    -- 모든 레코드 타입을 받는 변수 생성
    VEMP EMPLOYEES%ROWTYPE;
    -- CURSOR 생성(=ARRAYLIST)
    CURSOR C1 (VWORD VARCHAR2)
    IS
    SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, JOB_ID FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'||VWORD||'%';
BEGIN
    -- 임의문자 추출
    VWORD := DBMS_RANDOM.STRING('A',1);
    DBMS_OUTPUT.PUT_LINE('임의문자 : ' || VWORD); 
    OPEN C1(VWORD);
    LOOP 
        FETCH C1 INTO VEMP.EMPLOYEE_ID, VEMP.FIRST_NAME, VEMP.SALARY, VEMP.JOB_ID;
        -- C1 ROWCOUNT CHECK
        IF C1%ROWCOUNT = 0 THEN
            DBMS_OUTPUT.PUT_LINE('해당되는 직원이 없습니다.');
        END IF;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('ID : ' || VEMP.EMPLOYEE_ID || ' 이름 : ' || VEMP.FIRST_NAME || ' 연봉 : ' || VEMP.SALARY);
    END LOOP;
END;
/

EXECUTE EMP_PROCEDURE;

-- 저장 프로시저 2
CREATE OR REPLACE PROCEDURE EMP_PROCEDURE2
IS 
    -- 임의문자를 받는 변수 생성
    VWORD VARCHAR2(1);
    -- 모든 레코드 타입을 받는 변수 생성
    VEMP EMPLOYEES%ROWTYPE;
    -- CURSOR 생성(=ARRAYLIST)
    CURSOR C1
    IS
    SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, JOB_ID FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'||VWORD||'%';
BEGIN
    -- 임의문자 추출
    VWORD := DBMS_RANDOM.STRING('A',1);
    DBMS_OUTPUT.PUT_LINE('임의문자 : ' || VWORD); 
    FOR VEMP IN C1 LOOP
        DBMS_OUTPUT.PUT_LINE('ID : ' || VEMP.EMPLOYEE_ID || ' 이름 : ' || VEMP.FIRST_NAME || ' 연봉 : ' || VEMP.SALARY);
    
    END LOOP;
END;
/

EXECUTE EMP_PROCEDURE2;

CREATE OR REPLACE PROCEDURE EMP_PROCEDURE2(VWORD IN VARCHAR2)
IS
    VCOUNT NUMBER:=0; 
   -- 모든 레코드 타입을 받는 변수
   VEMP EMPLOYEES%ROWTYPE;
   -- 커서 = ARRAY LIST
   CURSOR C1
   IS
   SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'VWORD'%';
BEGIN
    DBMS_OUTPUT.PUT_LINE('입력된 문자' VWORD); 
    -- 먼저 데이터 유무 확인
   SELECT COUNT(*) INTO VCOUNT FROM EMPLOYEES WHERE FIRST_NAME LIKE '%'  VWORD  '%';
   IF VCOUNT = 0 THEN
      DBMS_OUTPUT.PUT_LINE('데이터가 존재하지 않습니다.');
   ELSE
      -- 커서 FOR LOOP 사용 (더 안전하고 간단)
      FOR VEMP IN C1 LOOP
         DBMS_OUTPUT.PUT_LINE('ID='  VEMP.EMPLOYEE_ID  'FIRST_NAME='  VEMP.FIRST_NAME);
      END LOOP;
   END IF;
END;
/

-- 프로시저 코드 확인
SELECT * FROM USER_SOURCE;

-- DEPT02 새로운 부서를 프로시저를 이용해서 입력하고, 전체를 출력하는 프로그램을 작성하시오.
CREATE OR REPLACE PROCEDURE DEPT_INSERT(
    DEPT_NO IN DEPT02.DEPARTMENT_ID%TYPE,
    DEPT_NAME IN DEPT02.DEPARTMENT_NAME%TYPE,
    DEPT_MANAGER_ID IN DEPT02.MANAGER_ID%TYPE,
    DEPT_LOCATION IN DEPT02.LOCATION_ID%TYPE
)
IS
BEGIN
    INSERT INTO DEPT02 VALUES(DEPT_NO, DEPT_NAME, DEPT_MANAGER_ID, DEPT_LOCATION);
    COMMIT;
    FOR VDEPT IN (SELECT * FROM DEPT02) LOOP
        DBMS_OUTPUT.PUT_LINE('ID= '  VDEPT.DEPARTMENT_ID  ' NAME= '  VDEPT.DEPARTMENT_NAME);
    END LOOP;
END;
/
SELECT * FROM DEPT02;
EXECUTE DEPT_INSERT(300, 'IT_DES', NULL, 4000);

-- DEPT02 프로시저를 이용해서 새로운 부서내용을 입력하고자 한다.
-- 기존에 없는 부서면 INSERT하고,기존에 있는 부서면 UPDATE를 하고, 그리고 해당된 부서를 출력하시오.
CREATE OR REPLACE PROCEDURE DEPT_INSERT_UPDATE(
    DEPT_NO IN DEPT02.DEPARTMENT_ID%TYPE,
    DEPT_NAME IN DEPT02.DEPARTMENT_NAME%TYPE,
    DEPT_MANAGER_ID IN DEPT02.MANAGER_ID%TYPE,
    DEPT_LOCATION IN DEPT02.LOCATION_ID%TYPE
)
IS
    VCOUNT NUMBER;
BEGIN
    SELECT COUNT() INTO VCOUNT FROM DEPT02 WHERE DEPARTMENT_ID = DEPT_NO;
    IF VCOUNT = 0 THEN
        INSERT INTO DEPT02 VALUES(DEPT_NO, DEPT_NAME, DEPT_MANAGER_ID, DEPT_LOCATION);
    ELSE
        UPDATE DEPT02 
        SET DEPARTMENT_NAME = DEPT_NAME, MANAGER_ID = DEPT_MANAGER_ID, LOCATION_ID = DEPT_LOCATION
        WHERE DEPARTMENT_ID = DEPT_NO;
    END IF
    COMMIT;

    FOR VDEPT IN (SELECT FROM DEPT02) LOOP
        DBMS_OUTPUT.PUT_LINE('ID= '  VDEPT.DEPARTMENT_ID  ' NAME= '  VDEPT.DEPARTMENT_NAME  ' MANAGER = '  VDEPT.MANAGER_ID  ' LOCATION_ID = '  VDEPT.LOCATION_ID);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE PROC_INOUTMODE (V_SAL IN OUT VARCHAR2)
IS BEGIN
V_SAL := '$'  SUBSTR(V_SAL, -9, 3)  ','  SUBSTR(V_SAL, -6, 3)  ',' || SUBSTR(V_SAL, -3, 3); END PROC_INOUTMODE;
/